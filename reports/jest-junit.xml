<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="92" failures="0" errors="0" time="1.584">
  <testsuite name="Message Delivery and Formatting Verification" errors="0" failures="0" skipped="14" timestamp="2025-06-20T23:29:11" time="0.706" tests="14">
    <testcase classname="Message Delivery and Formatting Verification SSE Message Format Validation should establish SSE connection successfully" name="Message Delivery and Formatting Verification SSE Message Format Validation should establish SSE connection successfully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification SSE Message Format Validation should format MCP response messages correctly" name="Message Delivery and Formatting Verification SSE Message Format Validation should format MCP response messages correctly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification SSE Message Format Validation should handle various MCP method calls" name="Message Delivery and Formatting Verification SSE Message Format Validation should handle various MCP method calls" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification SSE Message Format Validation should format error messages properly" name="Message Delivery and Formatting Verification SSE Message Format Validation should format error messages properly" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Message Timing and Delivery should deliver messages within acceptable timeframe" name="Message Delivery and Formatting Verification Message Timing and Delivery should deliver messages within acceptable timeframe" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Message Timing and Delivery should maintain message order for sequential requests" name="Message Delivery and Formatting Verification Message Timing and Delivery should maintain message order for sequential requests" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Message Timing and Delivery should handle concurrent message delivery" name="Message Delivery and Formatting Verification Message Timing and Delivery should handle concurrent message delivery" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Connection Stability should maintain connection stability over time" name="Message Delivery and Formatting Verification Connection Stability should maintain connection stability over time" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle malformed JSON in requests gracefully" name="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle malformed JSON in requests gracefully" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle malformed JSON in responses" name="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle malformed JSON in responses" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle requests without required fields" name="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle requests without required fields" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle non-existent methods" name="Message Delivery and Formatting Verification Error Handling and Edge Cases should handle non-existent methods" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Message Content Validation should handle special characters and encoding" name="Message Delivery and Formatting Verification Message Content Validation should handle special characters and encoding" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Message Delivery and Formatting Verification Message Content Validation should validate JSON-RPC message structure compliance" name="Message Delivery and Formatting Verification Message Content Validation should validate JSON-RPC message structure compliance" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="MCP Capability Negotiation" errors="0" failures="0" skipped="5" timestamp="2025-06-20T23:29:12" time="0.44" tests="12">
    <testcase classname="MCP Capability Negotiation Protocol Version Negotiation should accept matching protocol version" name="MCP Capability Negotiation Protocol Version Negotiation should accept matching protocol version" time="0.039">
    </testcase>
    <testcase classname="MCP Capability Negotiation Protocol Version Negotiation should reject unsupported protocol version" name="MCP Capability Negotiation Protocol Version Negotiation should reject unsupported protocol version" time="0.008">
    </testcase>
    <testcase classname="MCP Capability Negotiation Protocol Version Negotiation should handle missing protocol version" name="MCP Capability Negotiation Protocol Version Negotiation should handle missing protocol version" time="0.011">
    </testcase>
    <testcase classname="MCP Capability Negotiation Capability Discovery should advertise supported capabilities in SSE connection" name="MCP Capability Negotiation Capability Discovery should advertise supported capabilities in SSE connection" time="0">
      <skipped/>
    </testcase>
    <testcase classname="MCP Capability Negotiation Capability Discovery should include full capability details in initialization response" name="MCP Capability Negotiation Capability Discovery should include full capability details in initialization response" time="0.009">
    </testcase>
    <testcase classname="MCP Capability Negotiation Capability Negotiation should handle client requesting unsupported capability" name="MCP Capability Negotiation Capability Negotiation should handle client requesting unsupported capability" time="0.007">
    </testcase>
    <testcase classname="MCP Capability Negotiation Capability Negotiation should respect client capability preferences" name="MCP Capability Negotiation Capability Negotiation should respect client capability preferences" time="0.008">
    </testcase>
    <testcase classname="MCP Capability Negotiation Capability Negotiation should handle missing client capabilities gracefully" name="MCP Capability Negotiation Capability Negotiation should handle missing client capabilities gracefully" time="0.006">
    </testcase>
    <testcase classname="MCP Capability Negotiation Capability Updates should notify clients when tool list changes" name="MCP Capability Negotiation Capability Updates should notify clients when tool list changes" time="0">
      <skipped/>
    </testcase>
    <testcase classname="MCP Capability Negotiation Capability Updates should maintain capability state across reconnections" name="MCP Capability Negotiation Capability Updates should maintain capability state across reconnections" time="0">
      <skipped/>
    </testcase>
    <testcase classname="MCP Capability Negotiation Error Handling should handle malformed capability objects" name="MCP Capability Negotiation Error Handling should handle malformed capability objects" time="0">
      <skipped/>
    </testcase>
    <testcase classname="MCP Capability Negotiation Error Handling should handle invalid capability values" name="MCP Capability Negotiation Error Handling should handle invalid capability values" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="SchemaValidator" errors="0" failures="0" skipped="0" timestamp="2025-06-20T23:29:12" time="0.15" tests="43">
    <testcase classname="SchemaValidator constructor should create instance with default config" name="SchemaValidator constructor should create instance with default config" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator constructor should create instance with custom config" name="SchemaValidator constructor should create instance with custom config" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator validateSchema should validate a simple valid schema" name="SchemaValidator validateSchema should validate a simple valid schema" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator validateSchema should validate a complex valid object schema" name="SchemaValidator validateSchema should validate a complex valid object schema" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator validateSchema should validate array schema" name="SchemaValidator validateSchema should validate array schema" time="0">
    </testcase>
    <testcase classname="SchemaValidator validateSchema should return validation summary" name="SchemaValidator validateSchema should return validation summary" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator basic structure validation should error when type is missing in strict mode" name="SchemaValidator basic structure validation should error when type is missing in strict mode" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator basic structure validation should not error when type is missing in non-strict mode" name="SchemaValidator basic structure validation should not error when type is missing in non-strict mode" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator basic structure validation should error for invalid schema type" name="SchemaValidator basic structure validation should error for invalid schema type" time="0">
    </testcase>
    <testcase classname="SchemaValidator basic structure validation should accept all valid JSON Schema types" name="SchemaValidator basic structure validation should accept all valid JSON Schema types" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator object schema validation should warn when object schema has no properties in strict mode" name="SchemaValidator object schema validation should warn when object schema has no properties in strict mode" time="0">
    </testcase>
    <testcase classname="SchemaValidator object schema validation should not warn when object schema has no properties in non-strict mode" name="SchemaValidator object schema validation should not warn when object schema has no properties in non-strict mode" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator object schema validation should error when required is not an array" name="SchemaValidator object schema validation should error when required is not an array" time="0">
    </testcase>
    <testcase classname="SchemaValidator object schema validation should error when required item is not a string" name="SchemaValidator object schema validation should error when required item is not a string" time="0.002">
    </testcase>
    <testcase classname="SchemaValidator object schema validation should validate valid required array" name="SchemaValidator object schema validation should validate valid required array" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator array schema validation should warn when array schema has no items in strict mode" name="SchemaValidator array schema validation should warn when array schema has no items in strict mode" time="0">
    </testcase>
    <testcase classname="SchemaValidator array schema validation should not warn when array schema has no items in non-strict mode" name="SchemaValidator array schema validation should not warn when array schema has no items in non-strict mode" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator array schema validation should validate array schema with items" name="SchemaValidator array schema validation should validate array schema with items" time="0">
    </testcase>
    <testcase classname="SchemaValidator JSON Schema draft validation should warn for unsupported schema version" name="SchemaValidator JSON Schema draft validation should warn for unsupported schema version" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator JSON Schema draft validation should not warn for supported schema version" name="SchemaValidator JSON Schema draft validation should not warn for supported schema version" time="0">
    </testcase>
    <testcase classname="SchemaValidator JSON Schema draft validation should warn for deprecated keywords" name="SchemaValidator JSON Schema draft validation should warn for deprecated keywords" time="0">
    </testcase>
    <testcase classname="SchemaValidator JSON Schema draft validation should skip draft validation when disabled" name="SchemaValidator JSON Schema draft validation should skip draft validation when disabled" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator schema depth validation should error when schema exceeds max depth" name="SchemaValidator schema depth validation should error when schema exceeds max depth" time="0">
    </testcase>
    <testcase classname="SchemaValidator schema depth validation should allow custom max depth" name="SchemaValidator schema depth validation should allow custom max depth" time="0">
    </testcase>
    <testcase classname="SchemaValidator schema depth validation should skip depth validation when maxSchemaDepth is undefined" name="SchemaValidator schema depth validation should skip depth validation when maxSchemaDepth is undefined" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation string schema validation should error for negative minLength" name="SchemaValidator type-specific validation string schema validation should error for negative minLength" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation string schema validation should error for negative maxLength" name="SchemaValidator type-specific validation string schema validation should error for negative maxLength" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation string schema validation should error when minLength &gt; maxLength" name="SchemaValidator type-specific validation string schema validation should error when minLength &gt; maxLength" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation string schema validation should validate valid string constraints" name="SchemaValidator type-specific validation string schema validation should validate valid string constraints" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation numeric schema validation should error when minimum &gt; maximum" name="SchemaValidator type-specific validation numeric schema validation should error when minimum &gt; maximum" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation numeric schema validation should error when exclusiveMinimum &gt;= exclusiveMaximum" name="SchemaValidator type-specific validation numeric schema validation should error when exclusiveMinimum &gt;= exclusiveMaximum" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation numeric schema validation should error for negative multipleOf" name="SchemaValidator type-specific validation numeric schema validation should error for negative multipleOf" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation numeric schema validation should validate valid numeric constraints" name="SchemaValidator type-specific validation numeric schema validation should validate valid numeric constraints" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation object schema validation should error for negative minProperties" name="SchemaValidator type-specific validation object schema validation should error for negative minProperties" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation object schema validation should error for negative maxProperties" name="SchemaValidator type-specific validation object schema validation should error for negative maxProperties" time="0.002">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation object schema validation should error when minProperties &gt; maxProperties" name="SchemaValidator type-specific validation object schema validation should error when minProperties &gt; maxProperties" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation array schema validation should error for negative minItems" name="SchemaValidator type-specific validation array schema validation should error for negative minItems" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation array schema validation should error for negative maxItems" name="SchemaValidator type-specific validation array schema validation should error for negative maxItems" time="0">
    </testcase>
    <testcase classname="SchemaValidator type-specific validation array schema validation should error when minItems &gt; maxItems" name="SchemaValidator type-specific validation array schema validation should error when minItems &gt; maxItems" time="0">
    </testcase>
    <testcase classname="SchemaValidator edge cases should handle empty schema object" name="SchemaValidator edge cases should handle empty schema object" time="0">
    </testcase>
    <testcase classname="SchemaValidator edge cases should handle null schema" name="SchemaValidator edge cases should handle null schema" time="0">
    </testcase>
    <testcase classname="SchemaValidator edge cases should handle schema with circular references" name="SchemaValidator edge cases should handle schema with circular references" time="0.001">
    </testcase>
    <testcase classname="SchemaValidator edge cases should handle very large schema" name="SchemaValidator edge cases should handle very large schema" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Capability Negotiation" errors="0" failures="0" skipped="0" timestamp="2025-06-20T23:29:12" time="0.135" tests="15">
    <testcase classname="Capability Negotiation negotiateCapabilities should return server defaults when no client capabilities are provided" name="Capability Negotiation negotiateCapabilities should return server defaults when no client capabilities are provided" time="0.001">
    </testcase>
    <testcase classname="Capability Negotiation negotiateCapabilities should throw an error for incompatible protocol versions" name="Capability Negotiation negotiateCapabilities should throw an error for incompatible protocol versions" time="0.008">
    </testcase>
    <testcase classname="Capability Negotiation negotiateCapabilities should accept client with exact same capabilities" name="Capability Negotiation negotiateCapabilities should accept client with exact same capabilities" time="0">
    </testcase>
    <testcase classname="Capability Negotiation negotiateCapabilities should reject client with unsupported auth" name="Capability Negotiation negotiateCapabilities should reject client with unsupported auth" time="0">
    </testcase>
    <testcase classname="Capability Negotiation negotiateCapabilities should select highest common tool version" name="Capability Negotiation negotiateCapabilities should select highest common tool version" time="0.001">
    </testcase>
    <testcase classname="Capability Negotiation negotiateCapabilities should use server default when a client capability is not specified" name="Capability Negotiation negotiateCapabilities should use server default when a client capability is not specified" time="0.001">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return true for valid capabilities: full capabilities" name="Capability Negotiation validateClientCapabilities should return true for valid capabilities: full capabilities" time="0">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return true for valid capabilities: partial capabilities" name="Capability Negotiation validateClientCapabilities should return true for valid capabilities: partial capabilities" time="0.001">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return true for valid capabilities: empty capabilities" name="Capability Negotiation validateClientCapabilities should return true for valid capabilities: empty capabilities" time="0">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: null" name="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: null" time="0.001">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: string" name="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: string" time="0">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: number" name="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: number" time="0">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: unknown category" name="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: unknown category" time="0">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: category not an object" name="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: category not an object" time="0.001">
    </testcase>
    <testcase classname="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: invalid logging level" name="Capability Negotiation validateClientCapabilities should return false for invalid capabilities: invalid logging level" time="0">
    </testcase>
  </testsuite>
  <testsuite name="capability-negotiation" errors="0" failures="0" skipped="0" timestamp="2025-06-20T23:29:12" time="0.126" tests="8">
    <testcase classname="capability-negotiation negotiateCapabilities should return server defaults when no client capabilities provided" name="capability-negotiation negotiateCapabilities should return server defaults when no client capabilities provided" time="0">
    </testcase>
    <testcase classname="capability-negotiation negotiateCapabilities should throw StructuredError on protocol version mismatch" name="capability-negotiation negotiateCapabilities should throw StructuredError on protocol version mismatch" time="0.005">
    </testcase>
    <testcase classname="capability-negotiation negotiateCapabilities should negotiate tools capabilities correctly" name="capability-negotiation negotiateCapabilities should negotiate tools capabilities correctly" time="0.001">
    </testcase>
    <testcase classname="capability-negotiation negotiateCapabilities should negotiate resources capabilities correctly" name="capability-negotiation negotiateCapabilities should negotiate resources capabilities correctly" time="0">
    </testcase>
    <testcase classname="capability-negotiation negotiateCapabilities should negotiate prompts capabilities correctly" name="capability-negotiation negotiateCapabilities should negotiate prompts capabilities correctly" time="0">
    </testcase>
    <testcase classname="capability-negotiation negotiateCapabilities should negotiate logging capabilities correctly" name="capability-negotiation negotiateCapabilities should negotiate logging capabilities correctly" time="0.001">
    </testcase>
    <testcase classname="capability-negotiation negotiateCapabilities should handle partial client capabilities" name="capability-negotiation negotiateCapabilities should handle partial client capabilities" time="0">
    </testcase>
    <testcase classname="capability-negotiation negotiateCapabilities should handle all capabilities disabled by client" name="capability-negotiation negotiateCapabilities should handle all capabilities disabled by client" time="0.001">
    </testcase>
  </testsuite>
</testsuites>